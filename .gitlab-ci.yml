image: jhipster/jhipster:v6.8.0

cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
        - .gradle/
stages:
    - check
    - build
    - test
    - analyze
    - package
    - release
    - deploy

variables:
  CLUSTER_NAME: jhipster
  ZONE: europe-west2-a
  PROJECT: private-250107
  DOMAIN_NAME: 34.98.92.186.nip.io
  PROD_NAMESPACE: production
  REGISTRY_URL: registry.gitlab.com
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA

before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
nohttp:
    stage: check
    script:
        - ./gradlew checkstyleNohttp --no-daemon

gradle-compile:
    stage: build
    script:
        - ./gradlew compileJava -x check -PnodeInstall --no-daemon
    artifacts:
        paths:
          - build/classes/
          - build/generated/
        expire_in: 1 day

gradle-test:
    stage: test
    script:
        - ./gradlew test -PnodeInstall --no-daemon
    artifacts:
        reports:
            junit: build/test-results/test/TEST-*.xml
        paths:
            - build/test-results/
            - build/jacoco/
        expire_in: 1 day

gradle-integration-test:
    stage: test
    script:
        - ./gradlew integrationTest -PnodeInstall --no-daemon
    artifacts:
        reports:
            junit: build/test-results/integrationTest/TEST-*.xml
        paths:
            - build/test-results/
            - build/jacoco/
        expire_in: 1 day

gradle-package:
    stage: package
    script:
        - ./gradlew bootJar -Pprod -x check --no-daemon
    artifacts:
        paths:
            - build/libs/*.jar
            - build/classes
        expire_in: 1 day

docker-push:
    stage: release
    variables:
        REGISTRY_URL: registry.gitlab.com
        IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA
    dependencies:
        - gradle-package
    script:
        - ./gradlew jib -Pprod -Djib.to.image=$IMAGE_TAG -Djib.to.auth.username="gitlab-ci-token"  -Djib.to.auth.password=$CI_BUILD_TOKEN

deploy-to-production:
    stage: deploy
    image: artemkin/helm-gke:1.0
    before_script:
      - echo ${SERVICE_ACCOUNT} | base64 -d > service-key.json
      - gcloud auth activate-service-acount --key-file service-key.json
      - gcloud container cluster get-credentials ${CLUSTER_NAME} --zone ${ZONE} --project ${PROJECT}
      - helm init --client-only
    script:
      - helm upgrade --install jhipster  ./helm/jhipster --namespace=${PROD_NAMESPACE} --set image_tag=${IMAGE_TAG} --set domain_name=${DOMAIN_NAME}
    environment:
        name: ${PROD_NAMESPACE}
        url: http://${PROD_NAMESPACE}.${DOMAIN_NAME}
    when: manual
    only:
      - master
